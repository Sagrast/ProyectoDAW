1685309932
waR3U4bTeM%3A092f96b0853c51ebe51da87433727fc7-144a366dded545c8e65b07fdb0babb53
s:5496:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjE0NGEzNjZkZGVkNTQ1YzhlNjViMDdmZGIwYmFiYjUzIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTU6Im1vZGFsLmJsYWRlLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjY3OiJ2ZW5kb3IvbGFyYXZlbC9qZXRzdHJlYW0vcmVzb3VyY2VzL3ZpZXdzL2NvbXBvbmVudHMvbW9kYWwuYmxhZGUucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czozMTcyOiJAcHJvcHMoWydpZCcsICdtYXhXaWR0aCddKQoKQHBocAokaWQgPSAkaWQgPz8gbWQ1KCRhdHRyaWJ1dGVzLT53aXJlKCdtb2RlbCcpKTsKCiRtYXhXaWR0aCA9IFsKICAgICdzbScgPT4gJ3NtOm1heC13LXNtJywKICAgICdtZCcgPT4gJ3NtOm1heC13LW1kJywKICAgICdsZycgPT4gJ3NtOm1heC13LWxnJywKICAgICd4bCcgPT4gJ3NtOm1heC13LXhsJywKICAgICcyeGwnID0+ICdzbTptYXgtdy0yeGwnLApdWyRtYXhXaWR0aCA/PyAnMnhsJ107CkBlbmRwaHAKCjxkaXYKICAgIHgtZGF0YT0iewogICAgICAgIHNob3c6IEBlbnRhbmdsZSgkYXR0cmlidXRlcy0+d2lyZSgnbW9kZWwnKSkuZGVmZXIsCiAgICAgICAgZm9jdXNhYmxlcygpIHsKICAgICAgICAgICAgLy8gQWxsIGZvY3VzYWJsZSBlbGVtZW50IHR5cGVzLi4uCiAgICAgICAgICAgIGxldCBzZWxlY3RvciA9ICdhLCBidXR0b24sIGlucHV0Om5vdChbdHlwZT1cJ2hpZGRlblwnXSksIHRleHRhcmVhLCBzZWxlY3QsIGRldGFpbHMsIFt0YWJpbmRleF06bm90KFt0YWJpbmRleD1cJy0xXCddKScKCiAgICAgICAgICAgIHJldHVybiBbLi4uJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXQogICAgICAgICAgICAgICAgLy8gQWxsIG5vbi1kaXNhYmxlZCBlbGVtZW50cy4uLgogICAgICAgICAgICAgICAgLmZpbHRlcihlbCA9PiAhIGVsLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkKICAgICAgICB9LAogICAgICAgIGZpcnN0Rm9jdXNhYmxlKCkgeyByZXR1cm4gdGhpcy5mb2N1c2FibGVzKClbMF0gfSwKICAgICAgICBsYXN0Rm9jdXNhYmxlKCkgeyByZXR1cm4gdGhpcy5mb2N1c2FibGVzKCkuc2xpY2UoLTEpWzBdIH0sCiAgICAgICAgbmV4dEZvY3VzYWJsZSgpIHsgcmV0dXJuIHRoaXMuZm9jdXNhYmxlcygpW3RoaXMubmV4dEZvY3VzYWJsZUluZGV4KCldIHx8IHRoaXMuZmlyc3RGb2N1c2FibGUoKSB9LAogICAgICAgIHByZXZGb2N1c2FibGUoKSB7IHJldHVybiB0aGlzLmZvY3VzYWJsZXMoKVt0aGlzLnByZXZGb2N1c2FibGVJbmRleCgpXSB8fCB0aGlzLmxhc3RGb2N1c2FibGUoKSB9LAogICAgICAgIG5leHRGb2N1c2FibGVJbmRleCgpIHsgcmV0dXJuICh0aGlzLmZvY3VzYWJsZXMoKS5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICsgMSkgJSAodGhpcy5mb2N1c2FibGVzKCkubGVuZ3RoICsgMSkgfSwKICAgICAgICBwcmV2Rm9jdXNhYmxlSW5kZXgoKSB7IHJldHVybiBNYXRoLm1heCgwLCB0aGlzLmZvY3VzYWJsZXMoKS5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSAtMSB9LAogICAgfSIKICAgIHgtaW5pdD0iJHdhdGNoKCdzaG93JywgdmFsdWUgPT4gewogICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ292ZXJmbG93LXktaGlkZGVuJyk7CiAgICAgICAgICAgIHt7ICRhdHRyaWJ1dGVzLT5oYXMoJ2ZvY3VzYWJsZScpID8gJ3NldFRpbWVvdXQoKCkgPT4gZmlyc3RGb2N1c2FibGUoKS5mb2N1cygpLCAxMDApJyA6ICcnIH19CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdvdmVyZmxvdy15LWhpZGRlbicpOwogICAgICAgIH0KICAgIH0pIgogICAgeC1vbjpjbG9zZS5zdG9wPSJzaG93ID0gZmFsc2UiCiAgICB4LW9uOmtleWRvd24uZXNjYXBlLndpbmRvdz0ic2hvdyA9IGZhbHNlIgogICAgeC1vbjprZXlkb3duLnRhYi5wcmV2ZW50PSIkZXZlbnQuc2hpZnRLZXkgfHwgbmV4dEZvY3VzYWJsZSgpLmZvY3VzKCkiCiAgICB4LW9uOmtleWRvd24uc2hpZnQudGFiLnByZXZlbnQ9InByZXZGb2N1c2FibGUoKS5mb2N1cygpIgogICAgeC1zaG93PSJzaG93IgogICAgaWQ9Int7ICRpZCB9fSIKICAgIGNsYXNzPSJqZXRzdHJlYW0tbW9kYWwgZml4ZWQgaW5zZXQtMCBvdmVyZmxvdy15LWF1dG8gcHgtNCBweS02IHNtOnB4LTAgei01MCIKICAgIHN0eWxlPSJkaXNwbGF5OiBub25lOyIKPgogICAgPGRpdiB4LXNob3c9InNob3ciIGNsYXNzPSJmaXhlZCBpbnNldC0wIHRyYW5zZm9ybSB0cmFuc2l0aW9uLWFsbCIgeC1vbjpjbGljaz0ic2hvdyA9IGZhbHNlIiB4LXRyYW5zaXRpb246ZW50ZXI9ImVhc2Utb3V0IGR1cmF0aW9uLTMwMCIKICAgICAgICAgICAgICAgICAgICB4LXRyYW5zaXRpb246ZW50ZXItc3RhcnQ9Im9wYWNpdHktMCIKICAgICAgICAgICAgICAgICAgICB4LXRyYW5zaXRpb246ZW50ZXItZW5kPSJvcGFjaXR5LTEwMCIKICAgICAgICAgICAgICAgICAgICB4LXRyYW5zaXRpb246bGVhdmU9ImVhc2UtaW4gZHVyYXRpb24tMjAwIgogICAgICAgICAgICAgICAgICAgIHgtdHJhbnNpdGlvbjpsZWF2ZS1zdGFydD0ib3BhY2l0eS0xMDAiCiAgICAgICAgICAgICAgICAgICAgeC10cmFuc2l0aW9uOmxlYXZlLWVuZD0ib3BhY2l0eS0wIj4KICAgICAgICA8ZGl2IGNsYXNzPSJhYnNvbHV0ZSBpbnNldC0wIGJnLWdyYXktNTAwIG9wYWNpdHktNzUiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiB4LXNob3c9InNob3ciIGNsYXNzPSJtYi02IGJnLXdoaXRlIHJvdW5kZWQtbGcgb3ZlcmZsb3ctaGlkZGVuIHNoYWRvdy14bCB0cmFuc2Zvcm0gdHJhbnNpdGlvbi1hbGwgc206dy1mdWxsIHt7ICRtYXhXaWR0aCB9fSBzbTpteC1hdXRvIgogICAgICAgICAgICAgICAgICAgIHgtdHJhbnNpdGlvbjplbnRlcj0iZWFzZS1vdXQgZHVyYXRpb24tMzAwIgogICAgICAgICAgICAgICAgICAgIHgtdHJhbnNpdGlvbjplbnRlci1zdGFydD0ib3BhY2l0eS0wIHRyYW5zbGF0ZS15LTQgc206dHJhbnNsYXRlLXktMCBzbTpzY2FsZS05NSIKICAgICAgICAgICAgICAgICAgICB4LXRyYW5zaXRpb246ZW50ZXItZW5kPSJvcGFjaXR5LTEwMCB0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTEwMCIKICAgICAgICAgICAgICAgICAgICB4LXRyYW5zaXRpb246bGVhdmU9ImVhc2UtaW4gZHVyYXRpb24tMjAwIgogICAgICAgICAgICAgICAgICAgIHgtdHJhbnNpdGlvbjpsZWF2ZS1zdGFydD0ib3BhY2l0eS0xMDAgdHJhbnNsYXRlLXktMCBzbTpzY2FsZS0xMDAiCiAgICAgICAgICAgICAgICAgICAgeC10cmFuc2l0aW9uOmxlYXZlLWVuZD0ib3BhY2l0eS0wIHRyYW5zbGF0ZS15LTQgc206dHJhbnNsYXRlLXktMCBzbTpzY2FsZS05NSI+CiAgICAgICAge3sgJHNsb3QgfX0KICAgIDwvZGl2Pgo8L2Rpdj4KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";